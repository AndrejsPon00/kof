{{- if .Values.collectors.enabled }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Release.Name }}-k8s-cluster
  namespace: {{ .Release.Namespace }}
spec:
  mode: deployment
  serviceAccount: "{{ .Release.Name }}-k8s-cluster-collector"
  config:
    receivers:
      prometheus:
        config:
          global:
            external_labels:
              {{ .Values.global.clusterLabel }}: {{ .Values.global.clusterName }}
          scrape_configs:
            - job_name: 'apiserver'
              kubernetes_sd_configs:
                - role: endpoints
              relabel_configs:
                - replacement: kubernetes.default.svc.cluster.local:443
                  target_label: __address__
                - regex: (.+)
                  replacement: /api/v1/nodes/$${1}/proxy/metrics
                  source_labels:
                    - __meta_kubernetes_node_name
                  target_label: __metrics_path__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: node
              scheme: https
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: false
                server_name: kubernetes

      k8s_cluster:
        allocatable_types_to_report:
          - cpu
          - memory
          - storage
        auth_type: serviceAccount
        collection_interval: 10s
        node_conditions_to_report:
          - Ready
          - MemoryPressure
          - DiskPressure
          - NetworkUnavailable
      k8sobjects:
        auth_type: serviceAccount
        objects:
          - name: pods
            mode: pull
            label_selector: environment in (production),tier in (frontend)
            field_selector: status.phase=Running
            interval: 1m
          - exclude_watch_type:
              - DELETED
            group: events.k8s.io
            mode: watch
            name: events

    processors:
      batch: {}
    exporters:
      debug: {}
      prometheusremotewrite:
        endpoint: {{ .Values.kof.metrics.endpoint }}
        {{- include "kof-collectors.helper.tls_options" .Values.kof.metrics | indent 8 }}
        {{- if .Values.kof.basic_auth }}
        auth:
          authenticator: basicauth/metrics
        {{- end }}
      otlphttp:
        {{- if .Values.kof.basic_auth }}
        auth:
          authenticator: basicauth/logs
        {{- end }}
        {{- include "kof-collectors.helper.tls_options" .Values.kof.logs | indent 8 }}
        logs_endpoint: {{ .Values.kof.logs.endpoint }}

    {{- if .Values.kof.basic_auth }}
    extensions:
      {{- include "basic_auth_extensions" . | nindent 6 }}
    {{- end }}

    service:
      {{- if .Values.kof.basic_auth }}
      extensions:
        - basicauth/metrics
        - basicauth/logs
      {{- end }}
      pipelines:
        logs:
          exporters:
            - otlphttp
            - debug
          processors:
            - batch
          receivers:
            - k8sobjects
        metrics:
          exporters:
            - prometheusremotewrite
          processors:
            - batch
          receivers:
            - k8s_cluster
            - prometheus
{{- end }}
