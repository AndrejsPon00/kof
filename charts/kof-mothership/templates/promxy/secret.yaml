{{- /* Tracking secrets with the same name to avoid conflict during creation */}}
{{ $all_secrets := dict }}
{{- range .Values.promxy.config.serverGroups }}
{{- if .auth.create_secret }}
{{- /* Checking that the secret isn't created yet to avoid credentials regeneration */}}
{{- $secret := (lookup "v1" "Secret" $.Release.Namespace .auth.credentials_secret_name) }}
{{- if $secret }}
{{- $_ := set $all_secrets .auth.credentials_secret_name (dict "username" (index $secret.data .auth.username_key | b64dec) "password" (index $secret.data .auth.password_key | b64dec))}}
{{- end }}
{{- if and (not $secret) (not (hasKey $all_secrets .auth.credentials_secret_name)) }}
{{- $_ := set $all_secrets .auth.credentials_secret_name (dict "username" (randAlpha ($.Values.global.random_username_length | int)) "password" (randAlpha ($.Values.global.random_password_length | int)) )}}
---
kind: Secret
apiVersion: v1
metadata:
  name: {{ .auth.credentials_secret_name }}
  namespace: {{ $.Release.Namespace }}
stringData:
  {{ .auth.username_key}}: {{ index $all_secrets .auth.credentials_secret_name "username" | quote }}
  {{ .auth.password_key}}: {{ index $all_secrets .auth.credentials_secret_name "password" | quote }}
type: Opaque
{{- end }}
{{- end }}
{{- end }}
{{- if eq .Values.promxy.secret "" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "chart.secretname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
    {{- if .Values.promxy.extraLabels }}
    {{ toYaml .Values.promxy.extraLabels | nindent 4 }}
    {{- end }}
stringData:
  config.yaml: |
    global:
      evaluation_interval: 5s
      external_labels:
        source: promxy
    remote_write:
      - url: {{ .Values.promxy.config.remoteWriteUrl | default | quote }}
    promxy:
      server_groups:
        {{- range .Values.promxy.config.serverGroups }}
        - static_configs:
            - targets:
              {{- range .targets }}
              - {{ . | quote }}
              {{- end }}
          path_prefix: {{ .pathPrefix | default "/vm/select/0/prometheus/" | quote }}
          scheme: {{ .scheme | default "https" | quote }}
          http_client:
            dial_timeout: {{ .dialTimeout | default "1s" | quote }}
            tls_config:
              insecure_skip_verify: true
            basic_auth:
{{- if not .auth.create_secret }}
{{- $secret := (lookup "v1" "Secret" $.Release.Namespace .auth.credentials_secret_name) }}
{{- if not $.Values.global.lint }}
              username: {{ index $secret.data .auth.username_key | b64dec | quote }}
              password: {{ index $secret.data .auth.password_key | b64dec | quote }}
{{- end }}
{{- else }}
              username: {{ index $all_secrets .auth.credentials_secret_name "username" | quote }}
              password: {{ index $all_secrets .auth.credentials_secret_name "password" | quote }}
{{- end }}
          labels:
            promxyCluster: {{ .clusterName | quote }}
        {{- end }}
{{- end }}
